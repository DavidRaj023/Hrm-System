plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

repositories {
   jcenter()
}

dependencies {
	implementation 'com.google.code.gson:gson:2.8.5'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.23'	
	implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '3.0.0-M5'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'	
	testImplementation "org.testng:testng:7.0.0"
	testImplementation 'io.rest-assured:spring-web-test-client:4.4.0'
	
	testImplementation group: 'junit', name: 'junit', version: '4.13.2'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.0'
	testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.7.0'
}

test {
    useJUnitPlatform {
        includeTags 'Test01','Test02','Test03'
    }
}

version = '1.0'

ext {
    distDirPath =  "$buildDir/dist"
}
    
sourceSets {
    main {
        java {
            srcDir 'main'
        }
    }
    test {
        java {
            srcDir 'test'
        }
   }
}

task createJar(type: Jar) {
	manifest {
        attributes 'Main-Class': 'com.infinira.hr.HrApplication'
    }
    
    archiveBaseName = "hr"
    from sourceSets.main.output
}

task createTestJar(type: Jar) {
    archiveBaseName = "hrtest"
    from sourceSets.test.output
}

task createZip(type: Zip) {
    archiveFileName = "hr.zip"
    destinationDirectory = file("$distDirPath")
    
    into("hr/bin") {
        from("$rootDir/bin")
    }
    
    into("hr/config") {
        from("$rootDir/config")
    }
    
    into("hr/docs") {
        from("$rootDir/docs")
    }
    
    into("hr/libs") {
        from("$rootDir/libs")
    }
    into("hr/libs") {
        from("$buildDir/libs")
    }
    into("hr/db") {
        from("$rootDir/db")
    }
}

task copyReports(type: Copy)  {
	destinationDir = file("$rootDir/reports")
	
	into("hr-test/reports") {
        from("$buildDir/reports")
    }
    
    into("hr-test/test-results") {
        from("$buildDir/test-results")
    }
}

clean {
    delete rootProject.buildDir
}

task main {
    dependsOn clean, build, createJar, createTestJar, createZip, copyReports
    build.mustRunAfter(clean)
    createJar.mustRunAfter(build)
    createTestJar.mustRunAfter(createJar)
    createZip.mustRunAfter(createTestJar)
    copyReports.mustRunAfter(createZip)
}

